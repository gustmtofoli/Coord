install.packages('leaflet')
install.packages('RColorBrewer')
install.packages('scales')
install.packages('lattice')
install.packages('dplyr')
install.packages('DT')
install.packages('shinydashboard')
install.packages('curl')
install.packages('maptools')
install.packages('dismo')
# sudo apt-get install libprotobuf-dev
install.packages('protolite')
# sudo add-apt-repository -y ppa:opencpu/jq
# sudo apt-get update
# sudo apt-get install libjq-dev
install.packages('jqr')
# sudo apt-get install libv8-dev
install.packages('V8')
# sudo apt-get install libudunits2-dev
install.packages('units')
# sudo apt-get update && sudo apt-get install libgdal-dev libproj-dev
install.packages('rgdal')
install.packages('sf')
install.packages('rgeos')
install.packages('geojsonio')
install.packages('openssl')
install.packages('httr')
install.packages('plotly')
shiny::runApp('Desenvolvimento/Coord')
shiny::runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
# =====================================================================================
output$grid <- DT::renderDataTable({
if (!is.null(input$file1)) {
grid <- input$file1
grid_read <- read.csv(grid$datapath, header = input$header,
sep = input$sep, quote = input$quote)
grid_read
}
})
output$sp <- DT::renderDataTable({
if (!is.null(input$file2) & !is.null(input$file1)) {
grid <- input$file1
sp <- input$file2
grid_read <- read.csv(grid$datapath, header = input$header,
sep = input$sep, quote = input$quote)
sp_read <- read.csv(sp$datapath, header = input$header,
sep = input$sep, quote = input$quote)
remove_species_outliers(sp_read, grid_read)
}
})
output$result <- DT::renderDataTable({
if (!is.null(input$file1) & !is.null(input$file2)) {
grid <- input$file1
sp <- input$file2
grid_read <- read.csv(grid$datapath, header = input$header,
sep = input$sep, quote = input$quote)
sp_read <- read.csv(sp$datapath, header = input$header,
sep = input$sep, quote = input$quote)
if ((nrow(sp_read)*nrow(grid_read) <= 100000)) {
generate_result()
}
else {
showModal(modalDialog(
title = "Hey",
easyClose = TRUE,
footer = NULL,
"There are too many rows in those data. It would take a lot of time to generate the resultswith the current hardware.",
br(),
"But you still can analyze your data normally."
))
data.frame(Message = c("There are too many rows in those data. It would take a lot of time to generate the results with the current hardware. But you still can analyze your data normally."))
}
}
})
output$download_results <- downloadHandler(
filename = function(){"results.csv"},
content = function(fname){
if (!is.null(input$file2) & !is.null(input$file1)) {
write.csv(generate_result(), fname)
}
}
)
output$download_species_freq <- downloadHandler(
filename = function(){"species_freq.csv"},
content = function(fname){
if (!is.null(input$file2) & !is.null(input$file1)) {
write.csv(get_species_freq(), fname)
}
}
)
output$download_species_outliers <- downloadHandler(
filename = function(){"species_outliers.csv"},
content = function(fname){
if (!is.null(input$file2) & !is.null(input$file1)) {
write.csv(get_species_outliers(), fname)
}
}
)
output$download_species_outliers_freq <- downloadHandler(
filename = function(){"species_outliers_freq.csv"},
content = function(fname){
if (!is.null(input$file2) & !is.null(input$file1)) {
write.csv(get_species_outliers_freq(), fname)
}
}
)
output$species <- DT::renderDataTable({
get_species_freq()
})
output$species_outliers <- DT::renderDataTable(({
get_species_outliers()
}))
output$species_outliers_freq <- DT::renderDataTable(({
if (!is.null(input$file2) & !is.null(input$file1)) {
sp <- input$file2
grid <- input$file1
sp_read <- read.csv(sp$datapath, header = input$header,
sep = input$sep, quote = input$quote)
grid_read <- read.csv(grid$datapath, header = input$header,
sep = input$sep, quote = input$quote)
sp_subset <- subset(sp_read, sp_read$lon < min(grid_read$lon)
| sp_read$lon > max(grid_read$lon)
| sp_read$lat < min(grid_read$lat)
| sp_read$lat > max(grid_read$lat))
df_freq <- count(sp_subset, sp_subset$sp)
data.frame(Specie = df_freq$`sp_subset$sp`, Freq = df_freq$n)
}
}))
output$scatter_plot <- renderPlotly({
if (!is.null(input$file2) & !is.null(input$file1)) {
grid <- input$file1
sp <- input$file2
sp_read <- read.csv(sp$datapath, header = input$header,
sep = input$sep, quote = input$quote)
grid_read <- read.csv(grid$datapath, header = input$header,
sep = input$sep, quote = input$quote)
sp_read_subset <- remove_species_outliers(sp_read, grid_read)
plot_ly(data = sp_read_subset, x = ~lat, y = ~lon, color = ~sp)
}
})
output$map_grid <- renderLeaflet({
if (!is.null(input$file1)) {
grid <- input$file1
grid_read <- read.csv(grid$datapath, header = input$header,
sep = input$sep, quote = input$quote)
leaflet() %>%
addProviderTiles("Esri.OceanBasemap", group = "Esri.OceanBasemap") %>%
addProviderTiles("OpenStreetMap.Mapnik", group = "OpenStreetmap") %>%
addProviderTiles("Esri.WorldImagery", group = "Esri.WorldImagery") %>%
addLayersControl(baseGroups = c("OpenStreetmap","Esri.OceanBasemap", 'Esri.WorldImagery'),
options = layersControlOptions(collapsed = TRUE, autoZIndex = F)) %>%
setView(lng = -60.85, lat = -15.45, zoom = 3) %>%
addCircleMarkers(
lng = grid_read$lon,
lat = grid_read$lat,
popup = paste("lon:", grid_read$lon, ", lat:", grid_read$lat),
radius = 7,
color = "blue",
stroke = FALSE, fillOpacity = 0.3
)
}
})
output$map_sp <- renderLeaflet({
if (!is.null(input$file2) & !is.null(input$file1)) {
sp <- input$file2
grid <- input$file1
sp_read <- read.csv(sp$datapath, header = input$header,
sep = input$sep, quote = input$quote)
grid_read <- read.csv(grid$datapath, header = input$header,
sep = input$sep, quote = input$quote)
sp_read <- remove_species_outliers(sp_read, grid_read)
leaflet() %>%
addProviderTiles("Esri.OceanBasemap", group = "Esri.OceanBasemap") %>%
addProviderTiles("OpenStreetMap.Mapnik", group = "OpenStreetmap") %>%
addProviderTiles("Esri.WorldImagery", group = "Esri.WorldImagery") %>%
addLayersControl(baseGroups = c("OpenStreetmap","Esri.OceanBasemap", 'Esri.WorldImagery'),
options = layersControlOptions(collapsed = TRUE, autoZIndex = F)) %>%
setView(lng = -60.85, lat = -15.45, zoom = 3) %>%
addCircleMarkers(
data = sp_read,
lng = sp_read$lon,
lat = sp_read$lat,
popup = paste(sp_read$sp, "lon:", sp_read$lon, ", lat:", sp_read$lat),
radius = 7,
color = "orange",
stroke = FALSE, fillOpacity = 0.3
)
}
})
output$map_sp_clustered <- renderLeaflet({
if (!is.null(input$file2) & !is.null(input$file1)) {
sp <- input$file2
grid <- input$file1
sp_read <- read.csv(sp$datapath, header = input$header,
sep = input$sep, quote = input$quote)
grid_read <- read.csv(grid$datapath, header = input$header,
sep = input$sep, quote = input$quote)
sp_read <- remove_species_outliers(sp_read, grid_read)
leaflet() %>%
addProviderTiles("Esri.OceanBasemap", group = "Esri.OceanBasemap") %>%
addProviderTiles("OpenStreetMap.Mapnik", group = "OpenStreetmap") %>%
addProviderTiles("Esri.WorldImagery", group = "Esri.WorldImagery") %>%
addLayersControl(baseGroups = c("OpenStreetmap","Esri.OceanBasemap", 'Esri.WorldImagery'),
options = layersControlOptions(collapsed = TRUE, autoZIndex = F)) %>%
setView(lng = -60.85, lat = -15.45, zoom = 3) %>%
addMarkers(
data = sp_read,
label=~as.character(paste(sp_read$sp, "lon:", sp_read$lon, ", lat:", sp_read$lat)),
clusterOptions = markerClusterOptions()
) %>%
addLabelOnlyMarkers(data = sp_read,
lng = ~lon, lat = ~lat,
clusterOptions = markerClusterOptions()
)
}
})
}
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
shiny::runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
View(sp_read)
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
variables <- reactiveValues(sp_read = NULL)
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
View(variables)
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
runApp('Desenvolvimento/Coord')
q()
